
# Role que permite hacer el despliegue de los servidores de bases de datos
# Se hace la instalación y configuración en derivados de RedHat y Debian


# Lineas 8, 9 y 10 son para testear de manera independiente el rol como playbook

# - hosts: all
#   become: yes
#   tasks:

#Se incluye archivo de variables
  - name: Incluir variables
    include_vars:
      dir: ../vars/
      extensions:
        - 'yml'

# Instalacion del servidor de bases de datos y sus dependencias
#### Debian ####
  - name: Debian - Instalar MySQL y dependencias
    apt: 
      name: "{{ packages }}"
      state: present
    vars:
        packages:         
        - mysql-server
        - mysql-client      
        - python3-pip
        - python3-mysqldb
    when: ansible_facts['os_family'] == "Debian"

### RedHat ###
  - name: RedHat - Instalar MariaDB y dependencies
    yum: 
      name: "{{ packages }}"
      state: present
    vars:
        packages:
        - mariadb-server
        - python3-PyMySQL
    when: ansible_facts['os_family'] == "RedHat"
  - name: start mariadb
    service:
      name: mariadb
      enabled: true
      state: started
    when: ansible_facts['os_family'] == "RedHat"

##Se instalan paquetes MySQL-python y PyMySQL - Configuraciones comunes
  - name: Instalar MySQL-python
    pip:
      name: mysql-connector-python
      executable: pip3
      state: present
    when: ansible_facts['os_family'] == "Debian"

  - name: Instalar PyMySQL
    pip:
      name: PyMySQL
      executable: pip3
      state: present
    when: ansible_facts['os_family'] == "Debian"

#### RedHat ###
# Se configura SELinux para que permita conectar con el servidor de base de datos
# en cualquier puerto.
  - name: RedHat - Permitir conexiones a mysql - SELinux
    seboolean: name=mysql_connect_any state=true persistent=yes
    when: ansible_facts['os_family'] == "RedHat"

# Se crean archivos y directorios de MySQL
# Tareas comunes
  - name: Crear archivo de configuracion de Mysql
    template:      
      src: ../templates/my.cnf.j2
      dest: /etc/my.cnf
      owner: mysql
      group: mysql
      mode: u=rw,g=rw,o=r

  - name: Crear archivos de log de MySQL
    file:
      path: /var/log/mysqld.log
      state: touch
      owner: mysql
      group: mysql
      mode: '0775'

  - name: Crear socket de MySQL
    file:
      path: /var/lib/mysql/mysql.sock
      state: touch
      owner: mysql
      group: mysql
      mode: '0775'    

  - name: Crear directorio para PID de MySQL
    file:
      path: /var/run/mysqld
      state: directory
      owner: mysql
      group: mysql
      mode: '0775'

# Se inicializan y habilitan servicios MySQL
#### RedHat ###
  - name: RedHat - Iniciar y habilitar MySQL
    service: name=mysqld state=started enabled=yes
    when: ansible_facts['os_family'] == "RedHat"

  - name: Iniciar y Habilitar firewalld
    service: name=firewalld state=started enabled=yes
    when: ansible_facts['os_family'] == "RedHat"

  #### Debian ###
  - name: Debian - Iniciar y habilitar MySQL
    service: name=mysql state=started enabled=yes
    when: ansible_facts['os_family'] == "Debian"

  - name: Debian - Iniciar y habilitar ufw
    service: name=ufw state=started enabled=yes
    when: ansible_facts['os_family'] == "Debian"

# Creacion de reglas de firewall para funcionamiento de MariaDB
  #### RedHat ###
  - name: RedHat - Creacion regla de firewalld MariaDB
    firewalld: port={{ mysql_port }}/tcp permanent=true state=enabled immediate=yes
    when: ansible_facts['os_family'] == "RedHat"

#### Debian ####
  - name: Debian - Creacion regla de firewall MySQL
    ufw:
      rule: allow
      port: "{{ mysql_port }}"
      proto: tcp
    when: ansible_facts['os_family'] == "Debian"

# Creacion y configuracion de base de datos

#### RedHat ###
  - name: RedHat - Crear DB de aplicacion
    mysql_db:      
      name: "{{ dbname }}"
      state: present
    when: ansible_facts['os_family'] == "RedHat"

#### Debian ###
  - name: Debian - Crear DB de aplicacion
    mysql_db:
      login_unix_socket: /var/run/mysqld/mysqld.sock
      name: "{{ dbname }}"
      state: present
    when: ansible_facts['os_family'] == "Debian"   

# Eliminacion de usuario anonimo 
### Debian ###
  - name: Debian - Eliminar usuario anonimo
    no_log: true
    mysql_user:      
      login_unix_socket: /var/run/mysqld/mysqld.sock
      name: ''
      host: localhost
      state: absent
    when: ansible_facts['os_family'] == "Debian"  

  ### RedHat ###
  - name: RedHat - Eliminar usuario anonimo
    no_log: true
    mysql_user:
      name: ''
      host_all: True
      state: absent
      login_unix_socket: '/var/lib/mysql/mysql.sock'
    when: ansible_facts['os_family'] == "RedHat"

# Creacion de usuario de base de datos
### RedHat ###
  - name: RedHat - Crear usuario en DB
    no_log: true
    mysql_user:
      name: "{{ dbuser }}"
      password: "{{ upassword }}"
      priv: '{{ dbname }}.*:ALL,GRANT'
      state: present
    when: ansible_facts['os_family'] == "RedHat"

### Debian ###
  - name: Debian - Crear usuario en DB
    no_log: true
    mysql_user:
      login_unix_socket: /var/run/mysqld/mysqld.sock
      name: "{{ dbuser }}"
      password: "{{ upassword }}"
      priv: '{{ dbname }}.*:ALL,GRANT'
      state: present
    when: ansible_facts['os_family'] == "Debian"








